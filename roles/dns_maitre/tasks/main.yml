---
- name: installation de bind9
  apt:
    name: bind9

- name: iptables-persistent installation
  apt:
    name: iptables-persistent

- name: ajoute de named.conf.local
  template:
    src: "named.conf.local.j2"
    dest: "/etc/bind/named.conf.local"

- name: ajoute de named.conf.options
  template:
    src: "named.conf.options.j2"
    dest: "/etc/bind/named.conf.options"

- name: ajoute de named.conf
  template:
    src: "named.conf.j2"
    dest: "/etc/bind/named.conf"

- name: Checks if zone projetdns.com is created
  stat:
    path: "/etc/bind/db.projetdns.com"
  register: file_data

- name: ajoute de db.projetdns.com
  template:
    src: "db.projetdns.com.j2"
    dest: "/etc/bind/db.projetdns.com"
  when: not file_data.stat.exists
        
- name: ajoute de db.0.0.10.in-addr.arpa
  template:
    src: "db.0.0.10.in-addr.arpa.j2"
    dest: "/etc/bind/db.0.0.10.in-addr.arpa"
  when: not file_data.stat.exists

- name: ajoute de resolv.conf
  template:
    src: "resolv.conf.j2"
    dest: "/etc/resolv.conf"

- name: Allow established connections (input)
  iptables:
    table: filter
    chain: INPUT
    ctstate: ESTABLISHED
    jump: ACCEPT
    comment: Allow established connections (input)

- name: Allow established connections (output)
  iptables:
    table: filter
    chain: OUTPUT
    ctstate: ESTABLISHED
    jump: ACCEPT
    comment: Allow established connections (output)

- name: Allow SSH connections Ansible
  iptables:
    table: filter
    chain: INPUT
    protocol: tcp
    in_interface: eth0
    destination_port: '22'
    jump: ACCEPT
    comment: Allow SSH connections Ansible

- name: Allow SSH connections Vagrant
  iptables:
    table: filter
    chain: INPUT 
    protocol: tcp
    in_interface: eth1
    destination_port: '22'
    jump: ACCEPT
    comment: Allow SSH connections Vagrant

- name: Allow loopback connections (input)
  iptables:
    table: filter
    chain: INPUT
    in_interface: lo
    jump: ACCEPT 
    comment: Allow loopback connections (input)

- name: Allow loopback connections (output)
  iptables:
    table: filter
    chain: INPUT
    in_interface: lo
    jump: ACCEPT 
    comment: Allow loopback connections (output)

- name: Allow http to install and update packages with apt
  iptables:
    table: filter
    chain: OUTPUT
    protocol: tcp
    destination_port: '80'
    jump: ACCEPT 
    comment: Allow http to install and update packages with apt

- name: Allow https to install and update packages with apt
  iptables:
    table: filter
    chain: OUTPUT
    protocol: tcp
    destination_port: '443'
    jump: ACCEPT
    comment: Allow https to install and update packages with apt

- name: Allow dns connection (input tcp)
  iptables:
    table: filter
    chain: INPUT
    protocol: tcp
    destination_port: '53'
    jump: ACCEPT
    comment: Allow dns connection (input tcp) 

- name: Allow dns connection (output tcp)                   
  iptables:
    table: filter
    chain: OUTPUT
    protocol: tcp
    destination_port: '53'
    jump: ACCEPT
    comment: Allow dns connection (output tcp) 

- name: Allow dns connection (input udp)                   
  iptables:
    table: filter
    chain: INPUT
    protocol: udp
    destination_port: '53'
    jump: ACCEPT
    comment: Allow dns connection (input udp) 

- name: Allow dns connection (output udp)                   
  iptables:
    table: filter
    chain: OUTPUT
    protocol: udp
    destination_port: '53'
    jump: ACCEPT
    comment: Allow dns connection (output udp) 


- name: Drop all (input)
  iptables:
    chain: INPUT
    policy: DROP
    comment: Drop all (input)

- name: Drop all (forward)
  iptables:  
    chain: FORWARD
    policy: DROP
    comment: Drop all (forward)

- name: Drop all (output)
  iptables:  
    chain: OUTPUT
    policy: DROP
    comment: Drop all (output)

- name: Save current state of the firewall in system file
  community.general.iptables_state:
    ip_version: ipv4
    table: filter
    state: saved
    path: /etc/iptables/rules.v4

- name: ruby-full installation
  apt:
    name: ruby-full

- name: Install latest available version of sinatra
  community.general.gem:
    name: sinatra
    state: latest

- name: Adding API dns
  template:
    src: "dns.rb.j2"
    dest: "/home/vagrant/dns.rb"

- name: Checks if DNSSEC keys are created
  stat:
    path: "/etc/bind/db.projetdns.com.signed"
  register: file_data

- name: Report if DNSSCEC is configured
  debug:
    msg: "DNDNSSEC already configured"
  when: file_data.stat.exists

- name: "création de la paire de clés KSK : clé de signatures de clés"
  command: "dnssec-keygen -f KSK -a RSASHA1 -b 512 -K /etc/bind/ -n ZONE projetdns.com."
  when: not file_data.stat.exists

- name: "création de la paire de clés ZSK : clé de signature de zones"
  command: "dnssec-keygen -a RSASHA1 -b 512 -K /etc/bind/ -n ZONE projetdns.com."
  when: not file_data.stat.exists

- name:  Signe la zone avec les clés 
  shell: for key in /etc/bind/Kprojetdns.com*.key; do echo "\$INCLUDE $key" >> /etc/bind/db.projetdns.com; done
  when: not file_data.stat.exists

- name: Signature de la zone 
  shell: cd /etc/bind && dnssec-signzone -o projetdns.com. db.projetdns.com
  when: not file_data.stat.exists

- name: changement de l'user root en bind
  ansible.builtin.file:
    path: /etc/bind
    state: directory
    recurse: yes
    owner: bind
    group: bind

- name: bind9 restart
  ansible.builtin.service:
    name: bind9
    state: restarted
...

